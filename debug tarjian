void strong_connect(Graph *G, int 1){									1	2	3
	num[1]=min_num[1]=k;=1
	k++;=2
	push_stack(&S,1);
	on_stack[1]=1;
	List list=neighbors(G,1);={2,6}
	int j;
	for(j=1;j<=list.size;j++){
j=1:	int y=element_at(&list,1);=2												
		if(num[2]==-1){		//đúng
			strong_connect(G,2);
//nợ		min_num[1]=min(min_num[1],min_num[2]);=1
		}
		else if(on_stack[y])
			min_num[x]=min(min_num[x],num[y]);
j=2:	int y=element_at(&list,2);=6												
		if(num[6]==-1){		//đúng
			strong_connect(G,6);
//nợ		min_num[1]=min(min_num[1],min_num[6]);=1
		}
		else if(on_stack[y])
			min_num[x]=min(min_num[x],num[y]);
	}
	if(num[1]==min_num[1]){		//Đúng
		int w;
		do{
			w=top(&S);
			pop_stack(&S);
			on_stack[w]=0;
		}while(w!=x)
	}
	=>5=>6=>1
}
void strong_connect(Graph *G, int 2){
	num[2]=min_num[2]=2;
	k++;=3
	push_stack(&S,2);
	on_stack[2]=1;
	List list=neighbors(G,2);={3}
	int j;
	for(j=1;j<=list.size;j++){
j=1:	int y=element_at(&list,1);=3
		if(num[3]==-1){		//đúng
			strong_connect(G,3);
//nợ		min_num[2]=min(min_num[2],min_num[3]);=2
		}
		else if(on_stack[y])
			min_num[x]=min(min_num[x],num[y]);
	}
	if(num[2]==min_num[2]){		//Đúng
		int w;
		do{
			w=top(&S);
			pop_stack(&S);
			on_stack[w]=0;
		}while(w!=x)
	}
	=>7=>8=>4=>3=>2
}
void strong_connect(Graph *G, int 3){
	num[3]=min_num[3]=3;
	k++;=4
	push_stack(&S,3);
	on_stack[3]=1;
	List list=neighbors(G,3);={2,4}
	int j;
	for(j=1;j<=list.size;j++){
j=1:	int y=element_at(&list,1);=2
		if(num[2]==-1){		//sai
			strong_connect(G,y);
			min_num[x]=min(min_num[x],min_num[y]);
		}
		else if(on_stack[2])	//đúng	
			min_num[3]=min(min_num[3],num[2]);=2
j=2:	int y=element_at(&list,2);=4
		if(num[4]==-1){		//đúng
			strong_connect(G,4);
//nợ		min_num[3]=min(min_num[3],min_num[4]);=2
		}
		else if(on_stack[y])
			min_num[x]=min(min_num[x],num[y]);
	}
	if(num[3]==min_num[3]){		//Sai
		int w;
		do{
			w=top(&S);
			pop_stack(&S);
			on_stack[w]=0;
		}while(w!=x)
	}
}
void strong_connect(Graph *G, int 4){
	num[4]=min_num[4]=4;
	k++;=5
	push_stack(&S,4);
	on_stack[4]=1;
	List list=neighbors(G,4);={8}
	int j;
	for(j=1;j<=list.size;j++){
j=1:	int y=element_at(&list,1);=8
		if(num[8]==-1){		//đúng
			strong_connect(G,8);
//nợ		min_num[4]=min(min_num[4],min_num[8]);=3
		}
		else if(on_stack[y])
			min_num[x]=min(min_num[x],num[y]);
	}
	if(num[4]==min_num[4]){		//Sai
		int w;
		do{
			w=top(&S);
			pop_stack(&S);
			on_stack[w]=0;
		}while(w!=x)
	}
}
void strong_connect(Graph *G, int 8){									1	2	3	4	8	7
	num[8]=min_num[8]=5;
	k++;=6
	push_stack(&S,8);
	on_stack[8]=1;
	List list=neighbors(G,8);={4,7}
	int j;
	for(j=1;j<=list.size;j++){
j=1:	int y=element_at(&list,1);=4												
		if(num[4]==-1){		//sai
			strong_connect(G,y);
			min_num[x]=min(min_num[x],min_num[y]);
		}
		else if(on_stack[4])	//đúng
			min_num[8]=min(min_num[8],num[4]);=4
j=2:	int y=element_at(&list,2);=7												
		if(num[7]==-1){		//đúng
			strong_connect(G,7);
//nợ		min_num[8]=min(min_num[8],min_num[7]);=3
		}
		else if(on_stack[y])
			min_num[x]=min(min_num[x],num[y]);
	}
	if(num[8]==min_num[8]){		//Sai
		int w;
		do{
			w=top(&S);
			pop_stack(&S);
			on_stack[w]=0;
		}while(w!=x)
	}
}
void strong_connect(Graph *G, int 7){								
	num[7]=min_num[7]=6;
	k++;=7
	push_stack(&S,7);
	on_stack[7]=1;
	List list=neighbors(G,7);={3,8}
	int j;
	for(j=1;j<=list.size;j++){
j=1:	int y=element_at(&list,1);=3												
		if(num[3]==-1){		//sai
			strong_connect(G,y);
			min_num[x]=min(min_num[x],min_num[y]);
		}
		else if(on_stack[3])	//đúng
			min_num[7]=min(min_num[7],num[3]);=3
j=2:	int y=element_at(&list,2);=8												
		if(num[8]==-1){		//sai
			strong_connect(G,y);
			min_num[x]=min(min_num[x],min_num[y]);
		}
		else if(on_stack[8])	//đúng
			min_num[7]=min(min_num[7],num[8]);=3
	}
	if(num[7]==min_num[7]){		//Sai
		int w;
		do{
			w=top(&S);
			pop_stack(&S);
			on_stack[w]=0;
		}while(w!=x)
	}
}
void strong_connect(Graph *G, int 6){									
	num[6]=min_num[6]=7;
	k++;=8
	push_stack(&S,6);
	on_stack[6]=1;
	List list=neighbors(G,1);={2,5,7}
	int j;
	for(j=1;j<=list.size;j++){
j=1:	int y=element_at(&list,1);=2												
		if(num[2]==-1){		//sai
			strong_connect(G,y);
			min_num[x]=min(min_num[x],min_num[y]);
		}
		else if(on_stack[y])	//sai
			min_num[x]=min(min_num[x],num[y]);
j=2:	int y=element_at(&list,2);=5												
		if(num[5]==-1){		//đúng
			strong_connect(G,5);
//nợ		min_num[6]=min(min_num[6],min_num[5]);=1
		}
		else if(on_stack[y])
			min_num[x]=min(min_num[x],num[y]);
j=3:	int y=element_at(&list,3);=7												
		if(num[7]==-1){		//sai
			strong_connect(G,y);
			min_num[x]=min(min_num[x],min_num[y]);
		}
		else if(on_stack[y])	//sai
			min_num[x]=min(min_num[x],num[y]);
	}
	if(num[6]==min_num[6]){		//Sai
		int w;
		do{
			w=top(&S);
			pop_stack(&S);
			on_stack[w]=0;
		}while(w!=x)
	}
}
void strong_connect(Graph *G, int 5){									
	num[5]=min_num[5]=8;
	k++;=9
	push_stack(&S,5);
	on_stack[5]=1;
	List list=neighbors(G,1);={1}
	int j;
	for(j=1;j<=list.size;j++){
j=1:	int y=element_at(&list,1);=1												
		if(num[1]==-1){		//sai
			strong_connect(G,2);
			min_num[x]=min(min_num[x],min_num[y]);
		}
		else if(on_stack[1])	//đúng
			min_num[5]=min(min_num[5],num[1]);=1
	}
	if(num[5]==min_num[5]){		//Sai
		int w;
		do{
			w=top(&S);
			pop_stack(&S);
			on_stack[w]=0;
		}while(w!=x)
	}
}
