#include<stdio.h>
#include<string.h>
#include<windows.h>
#define MAX_M 100
#define MAX_N 100
void TextColor (int color){
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE) , color);
}
typedef struct {
	int m, n;
	int A[MAX_M][MAX_N];
	int r, c;
} State;
void init_state(State *S, char *s){
	int i,j;
	FILE *f;
	f=fopen(s,"r");
	fscanf(f,"%d%d\n",&S->m,&S->n);
	for(i=0;i<S->m;i++){
		for(j=0;j<S->n;j++){
			fscanf(f,"%d",&S->A[i][j]);
		}
	}
	fscanf(f,"%d%d",&S->r,&S->c);
	fclose(f);
}
void print_state(State S){
	int i,j;
	for(i=0;i<S.m;i++){
		printf("+----+----+----+----+\n");
		for(j=0;j<S.n;j++){
			if(S.A[i][j]!=S.m*S.n){
				if(j==0){
					printf("|");
					TextColor(14);
					printf("%2d",S.A[i][j]);
					TextColor(15);
					printf("  |");
				}
				else{
					TextColor(14);
					printf("%2d",S.A[i][j]);
					TextColor(15);
					printf("  |");
				}
			}
			else{
				if(j==0){
					printf("|");
					TextColor(11);
					printf("..");
					TextColor(15);
					printf("  |");
				}
				else{
					TextColor(11);
					printf("..");
					TextColor(15);
					printf("  |");
				}
			}
		}
		printf("\n");
	}
	printf("+----+----+----+----+\n");
}
int up(State S, State *N){
	int i,j;
	if(S.r>0){
		N->m=S.m;
		N->n=S.n;
		for(i=0;i<N->m;i++){
			for(j=0;j<N->n;j++){
				N->A[i][j]=S.A[i][j];
			}
		}
		N->r=S.r;
		N->c=S.c;
		N->A[100][100]=N->A[N->r][N->c];
		N->A[N->r][N->c]=N->A[N->r-1][N->c];
		N->A[N->r-1][N->c]=N->A[100][100];
		N->r--;
		return 1;		
	}
	return 0;
}
int down(State S, State *N){
	int i,j;
	if(S.r<S.m-1){
		N->m=S.m;
		N->n=S.n;
		for(i=0;i<N->m;i++){
			for(j=0;j<N->n;j++){
				N->A[i][j]=S.A[i][j];
			}
		}
		N->r=S.r;
		N->c=S.c;
		N->A[100][100]=N->A[N->r][N->c];
		N->A[N->r][N->c]=N->A[N->r+1][N->c];
		N->A[N->r+1][N->c]=N->A[100][100];
		N->r++;
		return 1;		
	}
	return 0;
}
int left(State S, State *N){
	int i,j;
	if(S.c>0){
		N->m=S.m;
		N->n=S.n;
		for(i=0;i<N->m;i++){
			for(j=0;j<N->n;j++){
				N->A[i][j]=S.A[i][j];
			}
		}
		N->r=S.r;
		N->c=S.c;
		N->A[100][100]=N->A[N->r][N->c];
		N->A[N->r][N->c]=N->A[N->r][N->c-1];
		N->A[N->r][N->c-1]=N->A[100][100];
		N->c--;
		return 1;		
	}
	return 0;
}
int right(State S, State *N){
	int i,j;
	if(S.c<S.n-1){
		N->m=S.m;
		N->n=S.n;
		for(i=0;i<N->m;i++){
			for(j=0;j<N->n;j++){
				N->A[i][j]=S.A[i][j];
			}
		}
		N->r=S.r;
		N->c=S.c;
		N->A[100][100]=N->A[N->r][N->c];
		N->A[N->r][N->c]=N->A[N->r][N->c+1];
		N->A[N->r][N->c+1]=N->A[100][100];
		N->c++;
		return 1;		
	}
	return 0;
}
int is_finished(State S){
	int flag=1,i,j;
	for(i=0;i<S.m;i++)
        for(j=0;j<S.n;j++)
            if(S.A[i][j]!=i*S.n+j+1)
                flag=0;
    return flag;
}
int main() {
    State S, N;
    init_state(&S,"k-puzzle.txt");
	while (is_finished(S)!=1){
    	system("cls");
		print_state(S);
    	char str[10];
    	scanf("%s",str);
    	if (strcmp(str, "UP")==0){
    		if(up(S,&N)==1)
    			S=N;
     		else 
    			continue;
		}
		else if(strcmp(str, "DOWN")==0){
			if(down(S,&N)==1)
    			S=N;
    		else 
    			continue;
		}
		else if(strcmp(str, "LEFT")==0){
			if(left(S,&N)==1)
				S=N;
    		else 
    			continue;
		}
		else if(strcmp(str, "RIGHT")==0){
			if(right(S,&N)==1)
				S=N;
    		else 
    			continue;
		}
		else if(strcmp(str, "EXIT")==0){
			printf("You lose!");
			break;
		}
		else{
			printf("Unknown command, please enter: UP, DOWN, LEFT, RIGHT or EXIT\n");
		}
    }
    if(is_finished(S)==1){
    	system("cls");
	    print_state(S);
		printf("You win!"); 
	}    
    return 0;
}
